generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Organization {
    id        String   @id @default(uuid())
    name      String
    domain    String   @unique
    createdAt DateTime @default(now())
    company   Company? // One-to-one relationship
}

model Company {
    id             Int              @id @default(autoincrement())
    name           String
    domain         String           @unique
    createdAt      DateTime         @default(now())
    organization   Organization?    @relation(fields: [organizationId], references: [id])
    organizationId String?          @unique
    topics         Topic[]
    mentions       CompanyMention[]
    mentionDetails MentionDetail[]
}

model Topic {
    id        Int      @id @default(autoincrement())
    company   Company? @relation(fields: [companyId], references: [id])
    companyId Int?

    name      String
    createdAt DateTime @default(now())

    prompts Prompt[]

    @@unique([companyId, name])
}

model Prompt {
    id        Int      @id @default(autoincrement())
    topic     Topic    @relation(fields: [topicId], references: [id])
    topicId   Int
    text      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())

    promptRuns PromptRun[]
}

model AIProvider {
    id   Int    @id @default(autoincrement())
    name String @unique

    promptRuns PromptRun[]
}

model PromptRun {
    id          Int        @id @default(autoincrement())
    prompt      Prompt     @relation(fields: [promptId], references: [id])
    promptId    Int
    provider    AIProvider @relation(fields: [providerId], references: [id])
    providerId  Int
    runAt       DateTime   @default(now())
    responseRaw Json

    companyMentions CompanyMention[]
    mentionDetails  MentionDetail[]

    @@index([runAt])
}

model CompanyMention {
    id            Int       @id @default(autoincrement())
    promptRun     PromptRun @relation(fields: [promptRunId], references: [id])
    promptRunId   Int
    company       Company   @relation(fields: [companyId], references: [id])
    companyId     Int
    sentiment     Float // −1 … +1  (per-run)
    visibilityPct Float // 100 if the company was mentioned in this run

    mentionDetails MentionDetail[]

    @@unique([promptRunId])
    @@index([companyId])
}

model Source {
    id     Int    @id @default(autoincrement())
    domain String @unique
    name   String

    urls SourceUrl[]
}

model SourceUrl {
    id        Int      @id @default(autoincrement())
    source    Source   @relation(fields: [sourceId], references: [id])
    sourceId  Int
    url       String   @unique
    createdAt DateTime @default(now())

    mentionDetails MentionDetail[]
}

model MentionDetail {
    id               Int             @id @default(autoincrement())
    promptRun        PromptRun       @relation(fields: [promptRunId], references: [id])
    promptRunId      Int
    company          Company         @relation(fields: [companyId], references: [id])
    companyId        Int
    sourceUrl        SourceUrl       @relation(fields: [sourceUrlId], references: [id])
    sourceUrlId      Int
    count            Int // always 1 → presence in this run
    CompanyMention   CompanyMention? @relation(fields: [companyMentionId], references: [id])
    companyMentionId Int?

    @@index([sourceUrlId])
}
