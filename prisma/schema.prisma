generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String       @id @default(uuid())
    email          String       @unique
    password       String
    firstName      String?
    lastName       String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model Organization {
    id        String               @id @default(uuid())
    name      String
    domain    String               @unique
    createdAt DateTime             @default(now())
    company   Company?             // One-to-one relationship
    users     User[]
    summary   OrganizationSummary?
}

model Company {
    id             Int              @id @default(autoincrement())
    name           String
    domain         String           @unique
    createdAt      DateTime         @default(now())
    organization   Organization?    @relation(fields: [organizationId], references: [id])
    organizationId String?          @unique
    prompts        Prompt[]
    mentions       CompanyMention[]
    mentionDetails MentionDetail[]
    recentMentions Mention[]
}

model Tag {
    id    Int    @id @default(autoincrement())
    label String @unique
    color String

    promptTags PromptTag[]
}

model Prompt {
    id        Int      @id @default(autoincrement())
    company   Company  @relation(fields: [companyId], references: [id])
    companyId Int
    text      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())

    promptRuns PromptRun[]
    promptTags PromptTag[]
    mentions   Mention[]
}

model PromptTag {
    id       Int    @id @default(autoincrement())
    prompt   Prompt @relation(fields: [promptId], references: [id])
    promptId Int
    tag      Tag    @relation(fields: [tagId], references: [id])
    tagId    Int

    @@unique([promptId, tagId])
}

model AIProvider {
    id   Int    @id @default(autoincrement())
    name String @unique

    promptRuns PromptRun[]
    mentions   Mention[]
}

model PromptRun {
    id          Int        @id @default(autoincrement())
    prompt      Prompt     @relation(fields: [promptId], references: [id])
    promptId    Int
    provider    AIProvider @relation(fields: [providerId], references: [id])
    providerId  Int
    runAt       DateTime   @default(now())
    responseRaw Json

    companyMentions CompanyMention[]
    mentionDetails  MentionDetail[]

    @@index([runAt])
}

model CompanyMention {
    id          Int       @id @default(autoincrement())
    promptRun   PromptRun @relation(fields: [promptRunId], references: [id])
    promptRunId Int
    company     Company   @relation(fields: [companyId], references: [id])
    companyId   Int
    sentiment   Float // −1 … +1  (per-run)

    mentionDetails MentionDetail[]

    @@unique([promptRunId, companyId])
    @@index([companyId])
}

model Source {
    id     Int    @id @default(autoincrement())
    domain String @unique
    name   String

    urls SourceUrl[]
}

model SourceUrl {
    id        Int      @id @default(autoincrement())
    source    Source   @relation(fields: [sourceId], references: [id])
    sourceId  Int
    url       String   @unique
    createdAt DateTime @default(now())

    mentionDetails MentionDetail[]
}

model Mention {
    id                 Int        @id @default(autoincrement())
    prompt             Prompt     @relation(fields: [promptId], references: [id])
    promptId           Int
    content            String
    aiProvider         AIProvider @relation(fields: [aiProviderId], references: [id])
    aiProviderId       Int
    company            Company    @relation(fields: [companyId], references: [id])
    companyId          Int
    mentionedCompanies Json // Array of {name: string, domain: string} objects
    createdAt          DateTime   @default(now())

    @@index([companyId, createdAt])
    @@index([createdAt])
}

model MentionDetail {
    id               Int             @id @default(autoincrement())
    promptRun        PromptRun       @relation(fields: [promptRunId], references: [id])
    promptRunId      Int
    company          Company         @relation(fields: [companyId], references: [id])
    companyId        Int
    sourceUrl        SourceUrl       @relation(fields: [sourceUrlId], references: [id])
    sourceUrlId      Int
    count            Int // always 1 → presence in this run
    CompanyMention   CompanyMention? @relation(fields: [companyMentionId], references: [id])
    companyMentionId Int?

    @@index([sourceUrlId])
}

model OrganizationSummary {
    id             String       @id @default(uuid())
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @unique
    analysis       String       @db.Text
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}
